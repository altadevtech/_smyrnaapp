// Script para popular dados de exemplo automaticamente
import Database from '../database.js'

class SampleDataSeeder {
  static async seedSampleData() {
    console.log('üå± Verificando se √© necess√°rio popular dados de exemplo...')
    
    try {
      const db = Database.getDb()
      
      // Verificar se j√° existem dados
      const pageCount = await this.getPageCount()
      const categoryCount = await this.getCategoryCount()
      
      if (pageCount > 0) {
        console.log(`üìä J√° existem ${pageCount} p√°ginas. N√£o populando dados de exemplo.`)
        return
      }
      
      console.log('üìù Populando dados de exemplo para demonstra√ß√£o...')
      
      // 1. Garantir categorias existem
      await this.ensureCategories()
      
      // 2. Criar p√°ginas de exemplo
      await this.createSamplePages()
      
      // 3. Criar posts de exemplo
      await this.createSamplePosts()
      
      console.log('‚úÖ Dados de exemplo populados com sucesso!')
      
    } catch (error) {
      console.error('‚ùå Erro ao popular dados de exemplo:', error)
    }
  }
  
  static getPageCount() {
    return new Promise((resolve, reject) => {
      const db = Database.getDb()
      
      // Primeiro verificar se a coluna 'type' existe
      db.get("PRAGMA table_info(pages)", (err, tableInfo) => {
        if (err) {
          reject(err)
          return
        }
        
        // Verificar todas as colunas da tabela
        db.all("PRAGMA table_info(pages)", (err, columns) => {
          if (err) {
            reject(err)
            return
          }
          
          const hasTypeColumn = columns.some(col => col.name === 'type')
          
          let query
          if (hasTypeColumn) {
            // Se tem coluna type, usar filtro completo
            query = "SELECT COUNT(*) as count FROM pages WHERE type = 'wiki' AND status = 'published'"
          } else {
            // Se n√£o tem coluna type, assumir que todas as pages s√£o wiki
            query = "SELECT COUNT(*) as count FROM pages WHERE status = 'published'"
          }
          
          db.get(query, (err, result) => {
            if (err) reject(err)
            else resolve(result.count)
          })
        })
      })
    })
  }
  
  static getCategoryCount() {
    return new Promise((resolve, reject) => {
      const db = Database.getDb()
      
      // Verificar se a coluna 'type' existe na tabela categories
      db.all("PRAGMA table_info(categories)", (err, columns) => {
        if (err) {
          reject(err)
          return
        }
        
        const hasTypeColumn = columns.some(col => col.name === 'type')
        
        let query
        if (hasTypeColumn) {
          query = "SELECT COUNT(*) as count FROM categories WHERE type = 'wiki'"
        } else {
          query = "SELECT COUNT(*) as count FROM categories"
        }
        
        db.get(query, (err, result) => {
          if (err) reject(err)
          else resolve(result.count)
        })
      })
    })
  }
  
  static ensureCategories() {
    return new Promise((resolve, reject) => {
      const db = Database.getDb()
      
      // Verificar estrutura da tabela categories primeiro
      db.all("PRAGMA table_info(categories)", (err, columns) => {
        if (err) {
          reject(err)
          return
        }
        
        const hasTypeColumn = columns.some(col => col.name === 'type')
        const hasColorColumn = columns.some(col => col.name === 'color')
        
        const categories = [
          { name: 'Processos Operacionais', slug: 'processos-operacionais', color: '#3B82F6' },
          { name: 'Pol√≠ticas Internas', slug: 'politicas-internas', color: '#EF4444' },
          { name: 'Recursos Humanos', slug: 'recursos-humanos', color: '#10B981' },
          { name: 'Tecnologia', slug: 'tecnologia', color: '#8B5CF6' },
          { name: 'Financeiro', slug: 'financeiro', color: '#F59E0B' }
        ]
        
        let completed = 0
        
        categories.forEach(category => {
          // Construir query dinamicamente baseada nas colunas existentes
          let insertQuery = "INSERT OR IGNORE INTO categories (name, slug"
          let values = [category.name, category.slug]
          let placeholders = "?, ?"
          
          if (hasTypeColumn) {
            insertQuery += ", type"
            values.push('wiki')
            placeholders += ", ?"
          }
          
          if (hasColorColumn) {
            insertQuery += ", color"
            values.push(category.color)
            placeholders += ", ?"
          }
          
          insertQuery += ", created_at, updated_at) VALUES (" + placeholders + ", datetime('now'), datetime('now'))"
          
          db.run(insertQuery, values, function(err) {
            if (err) {
              console.error(`Erro ao criar categoria ${category.name}:`, err)
            }
            completed++
            if (completed === categories.length) {
              resolve()
            }
          })
        })
      })
    })
  }
  
  static createSamplePages() {
    return new Promise(async (resolve, reject) => {
      const db = Database.getDb()
      
      // Buscar IDs das categorias
      db.all("PRAGMA table_info(categories)", (err, columns) => {
        if (err) {
          reject(err)
          return
        }
        
        const hasTypeColumn = columns.some(col => col.name === 'type')
        
        let query
        if (hasTypeColumn) {
          query = "SELECT id, slug FROM categories WHERE type = 'wiki'"
        } else {
          query = "SELECT id, slug FROM categories"
        }
        
        db.all(query, (err, categories) => {
          if (err) {
            reject(err)
            return
          }
        
        const catMap = {}
        categories.forEach(cat => {
          catMap[cat.slug] = cat.id
        })
        
        const samplePages = [
          {
            title: 'Manual de Integra√ß√£o de Novos Funcion√°rios',
            content: `# Manual de Integra√ß√£o

## Vis√£o Geral
Este manual descreve o processo completo de integra√ß√£o de novos funcion√°rios na empresa.

## Etapas do Processo

### 1. Prepara√ß√£o Pr√©-Chegada
- Preparar esta√ß√£o de trabalho
- Configurar contas e acessos
- Preparar documenta√ß√£o

### 2. Primeiro Dia
- Apresenta√ß√£o da equipe
- Tour pelas instala√ß√µes
- Entrega de materiais

### 3. Primeira Semana
- Treinamentos b√°sicos
- Defini√ß√£o de objetivos
- Acompanhamento inicial

## Documentos Necess√°rios
- Contrato de trabalho
- Termo de confidencialidade
- Manual do funcion√°rio`,
            category: 'processos-operacionais'
          },
          {
            title: 'Pol√≠tica de Home Office',
            content: `# Pol√≠tica de Trabalho Remoto

## Objetivos
Estabelecer diretrizes claras para o trabalho remoto, garantindo produtividade e bem-estar.

## Elegibilidade
- Funcion√°rios com mais de 6 meses na empresa
- Aprova√ß√£o do gestor direto
- Fun√ß√£o compat√≠vel com trabalho remoto

## Requisitos T√©cnicos
- Conex√£o de internet est√°vel (m√≠nimo 50 Mbps)
- Equipamento adequado
- Ambiente de trabalho apropriado

## Hor√°rios e Disponibilidade
- Manter hor√°rio padr√£o de trabalho
- Estar dispon√≠vel durante reuni√µes
- Comunicar aus√™ncias previamente

## Ferramentas Obrigat√≥rias
- Microsoft Teams
- Sistema de gest√£o de projetos
- VPN corporativa`,
            category: 'politicas-internas'
          },
          {
            title: 'Processo de Recrutamento e Sele√ß√£o',
            content: `# Processo de R&S

## Etapas do Processo

### 1. Identifica√ß√£o da Necessidade
- An√°lise da vaga
- Aprova√ß√£o or√ßament√°ria
- Defini√ß√£o do perfil

### 2. Divulga√ß√£o
- Publica√ß√£o em portais
- Acionamento de headhunters
- Indica√ß√µes internas

### 3. Triagem
- An√°lise de curr√≠culos
- Testes online
- Primeira entrevista (RH)

### 4. Entrevistas
- Entrevista t√©cnica
- Entrevista comportamental
- Entrevista com gestor

### 5. Finaliza√ß√£o
- Verifica√ß√£o de refer√™ncias
- Negocia√ß√£o da proposta
- Contrata√ß√£o

## M√©tricas Importantes
- Time to hire: 30 dias
- Taxa de aprova√ß√£o em experi√™ncia: 95%
- Satisfa√ß√£o dos candidatos: 4.5/5`,
            category: 'recursos-humanos'
          },
          {
            title: 'Guia de Seguran√ßa da Informa√ß√£o',
            content: `# Seguran√ßa da Informa√ß√£o

## Pol√≠ticas de Senha
- M√≠nimo 12 caracteres
- Combina√ß√£o de letras, n√∫meros e s√≠mbolos
- Altera√ß√£o a cada 90 dias
- N√£o reutilizar √∫ltimas 12 senhas

## Acesso a Sistemas
- Princ√≠pio do menor privil√©gio
- Autentica√ß√£o de dois fatores obrigat√≥ria
- Revis√£o trimestral de acessos
- Bloqueio autom√°tico ap√≥s inatividade

## Prote√ß√£o de Dados
- Classifica√ß√£o de informa√ß√µes
- Criptografia para dados sens√≠veis
- Backup di√°rio autom√°tico
- Pol√≠tica de reten√ß√£o de dados

## Incidentes de Seguran√ßa
- Notifica√ß√£o imediata ao TI
- Isolamento do sistema afetado
- Investiga√ß√£o e documenta√ß√£o
- Plano de recupera√ß√£o

## Treinamentos
- Conscientiza√ß√£o anual obrigat√≥ria
- Simula√ß√µes de phishing mensais
- Atualiza√ß√µes sobre novas amea√ßas`,
            category: 'tecnologia'
          },
          {
            title: 'Manual de Reembolso de Despesas',
            content: `# Reembolso de Despesas

## Despesas Eleg√≠veis
- Viagens a trabalho
- Hospedagem e alimenta√ß√£o
- Transporte
- Material de escrit√≥rio
- Cursos e treinamentos

## Limites e Aprova√ß√µes
- At√© R$ 500: Aprova√ß√£o do gestor
- R$ 500 - R$ 2.000: Aprova√ß√£o da diretoria
- Acima R$ 2.000: Aprova√ß√£o do CEO

## Documenta√ß√£o Necess√°ria
- Nota fiscal original
- Comprovante de pagamento
- Justificativa detalhada
- Formul√°rio de reembolso preenchido

## Prazos
- Solicita√ß√£o: at√© 30 dias ap√≥s a despesa
- An√°lise: at√© 5 dias √∫teis
- Pagamento: at√© 15 dias √∫teis ap√≥s aprova√ß√£o

## Despesas N√£o Cobertas
- Multas de tr√¢nsito
- Despesas pessoais
- Gorjetas excessivas
- Bebidas alco√≥licas`,
            category: 'financeiro'
          }
        ]
        
        let completed = 0
        
        samplePages.forEach(page => {
          const categoryId = catMap[page.category]
          if (!categoryId) {
            console.error(`Categoria n√£o encontrada: ${page.category}`)
            completed++
            return
          }
          
          const slug = page.title.toLowerCase()
            .normalize('NFD')
            .replace(/[\u0300-\u036f]/g, '')
            .replace(/[^a-z0-9\s]/g, '')
            .replace(/\s+/g, '-')
            .replace(/-+/g, '-')
            .trim('-')
          
          db.run(
            `INSERT INTO pages (title, content, slug, type, status, category_id, author_id, created_at, updated_at)
             VALUES (?, ?, ?, 'wiki', 'published', ?, 1, datetime('now'), datetime('now'))`,
            [page.title, page.content, slug, categoryId],
            function(err) {
              if (err) {
                console.error(`Erro ao criar p√°gina ${page.title}:`, err)
              } else {
                console.log(`‚úÖ P√°gina criada: ${page.title}`)
              }
              completed++
              if (completed === samplePages.length) {
                resolve()
              }
            }
          )
        })
      })
    })
  }
  
  static createSamplePosts() {
    return new Promise((resolve) => {
      const db = Database.getDb()
      
      const samplePosts = [
        {
          title: 'Bem-vindos ao Sistema Wiki da Empresa',
          content: `Estamos felizes em anunciar o lan√ßamento do nosso novo sistema de wiki corporativo! 

Este sistema permitir√° que todos os colaboradores acessem informa√ß√µes importantes sobre processos, pol√≠ticas e procedimentos da empresa.

**Principais funcionalidades:**
- Busca avan√ßada por categorias
- Interface intuitiva e responsiva
- Controle de vers√µes
- Sistema de coment√°rios

Esperamos que esta ferramenta facilite o acesso √† informa√ß√£o e melhore nossa produtividade!`,
          summary: 'An√∫ncio do lan√ßamento do novo sistema de wiki corporativo com suas principais funcionalidades.'
        },
        {
          title: 'Novas Pol√≠ticas de Seguran√ßa Implementadas',
          content: `Para garantir a seguran√ßa dos dados da empresa, implementamos novas pol√≠ticas de seguran√ßa que entrar√£o em vigor a partir do pr√≥ximo m√™s.

**Principais mudan√ßas:**
- Autentica√ß√£o de dois fatores obrigat√≥ria
- Novos requisitos de senha
- Treinamento de conscientiza√ß√£o em seguran√ßa
- Revis√£o trimestral de acessos

Todos os funcion√°rios receber√£o treinamento espec√≠fico sobre as novas pol√≠ticas. Para d√∫vidas, entre em contato com o setor de TI.`,
          summary: 'Implementa√ß√£o de novas pol√≠ticas de seguran√ßa da informa√ß√£o e principais mudan√ßas.'
        }
      ]
      
      let completed = 0
      
      samplePosts.forEach(post => {
        const slug = post.title.toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .replace(/[^a-z0-9\s]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim('-')
        
        db.run(
          `INSERT INTO posts (title, content, slug, summary, type, status, author_id, created_at, updated_at)
           VALUES (?, ?, ?, ?, 'blog', 'published', 1, datetime('now'), datetime('now'))`,
          [post.title, post.content, slug, post.summary],
          function(err) {
            if (err) {
              console.error(`Erro ao criar post ${post.title}:`, err)
            } else {
              console.log(`‚úÖ Post criado: ${post.title}`)
            }
            completed++
            if (completed === samplePosts.length) {
              resolve()
            }
          }
        )
      })
    })
  }
}

export default SampleDataSeeder
